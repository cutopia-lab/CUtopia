type Mutation {
  createReview(input: CreateReviewInput!): CreateReviewResult @auth
  voteReview(input: VoteReviewInput!): VoteReviewResult @auth
}

type Query {
  reviews(input: ReviewsFilter): ReviewsResult!
  review(input: ReviewFilter!): Review
}

type ReviewsResult {
  reviews: [Review]!
  lastEvaluatedKey: LastEvaluatedKey
}

input ReviewsFilter {
  """
    Either set courseId or getLatest
  """
  courseId: String
  getLatest: Boolean
  ascendingDate: Boolean
  ascendingVote: Boolean
  lastEvaluatedKey: LastEvaluatedKeyInput
}

input ReviewFilter {
  courseId: String!
  createdDate: String!
}

input LastEvaluatedKeyInput {
  courseId: String!
  createdDate: String!
  upvotes: Int
}

type LastEvaluatedKey {
  courseId: String!
  createdDate: String!
  upvotes: Int
}

input CreateReviewInput {
  anonymous: Boolean!
  title: String
  courseId: String!
  term: String!
  section: String!
  lecturer: String!
  overall: Int!
  grading: ReviewDetailsInput!
  teaching: ReviewDetailsInput!
  difficulty: ReviewDetailsInput!
  content: ReviewDetailsInput!
}

type CreateReviewResult {
  id: String
  createdDate: String
  error: String
}

input VoteReviewInput {
  courseId: String!
  createdDate: String!
  vote: Int!
}

type VoteReviewResult {
  review: Review
  error: String
}

type Review {
  id: String!
  courseId: String!
  username: String!
  anonymous: Boolean!
  title: String
  createdDate: String!
  modifiedDate: String!
  term: String!
  section: String!
  lecturer: String!
  overall: Int!
  grading: ReviewDetails!
  teaching: ReviewDetails!
  difficulty: ReviewDetails!
  content: ReviewDetails!
  upvotes: Int!
  downvotes: Int!
  myVote: Int
}

type ReviewDetails {
  grade: Int!
  text: String!
}

input ReviewDetailsInput {
  grade: Int!
  text: String!
}
