AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Parameters:
  UserSNSTopic:
    Type: String
Resources:
  GraphQL:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./graphql/build
      Handler: graphql.graphqlHandler
      Events:
        HttpGet:
          Properties:
            Method: get
            Path: /graphql
            Auth:
              Authorizer: null
          Type: Api
        HttpOptions:
          Properties:
            Method: options
            Path: /graphql
            Auth:
              Authorizer: null
          Type: Api
        HttpPost:
          Properties:
            Method: post
            Path: /graphql
            Auth:
              Authorizer: null
          Type: Api
      Environment:
        Variables:
          UserSNSTopic: !Ref UserSNSTopic
      Role: !GetAtt GraphQLRole.Arn
      Runtime: nodejs14.x
      Timeout: 20
      MemorySize: 512
  GraphQLRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - arn:aws:logs:*:*:*
              - Action:
                  - SNS:Publish
                Effect: Allow
                Resource:
                  - !Ref UserSNSTopic
            Version: "2012-10-17"
          PolicyName: GraphQLPolicy
  Emailer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./emailer
      Handler: index.handler
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref UserSNSTopic
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs14.x
      Timeout: 20
      MemorySize: 512
  ScheduledUpdateRanking:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cron-update-ranking
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs14.x
      Timeout: 20
      MemorySize: 512
  ScheduledRemoveTimetable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cron-remove-timetable
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs14.x
      Timeout: 20
      MemorySize: 512
  ScheduledResendEmail:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./emailer
      Handler: resend.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs14.x
      Timeout: 20
      MemorySize: 512
  ThirtyMinutesScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(30 * * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ScheduledUpdateRanking.Arn
          Id: UpdateRanking
        - Arn: !GetAtt ScheduledRemoveTimetable.Arn
          Id: RemoveTimetable
  FiveMinutesScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0/5 * * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ScheduledResendEmail.Arn
          Id: ResendEmail
  # TODO: efficient way to grant permissions
  # of accessing multiple lambda functions in a single resource?
  InvokeRemoveTimetablePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ScheduledRemoveTimetable
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ThirtyMinutesScheduledRule.Arn
  InvokeUpdateRankingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ScheduledUpdateRanking
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ThirtyMinutesScheduledRule.Arn
  InvokeResendEmailPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ScheduledResendEmail
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt FiveMinutesScheduledRule.Arn
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - arn:aws:logs:*:*:*
            Version: "2012-10-17"
          PolicyName: LambdaPolicy
