AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Parameters:
  IsProduction:
    Type: String
  AtlasUri:
    Type: String
  GmailAddress:
    Type: String
  GamilClientID:
    Type: String
  GmailClientSecret:
    Type: String
  GmailRefreshToken:
    Type: String
  UserSNSTopic:
    Type: String
Resources:
  GraphQL:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./graphql/build
      Handler: graphql.graphqlHandler
      Events:
        HttpGet:
          Properties:
            Method: get
            Path: /static/course_list.json
          Type: Api
        HttpOptions:
          Properties:
            Method: options
            Path: /static/course_list.json
          Type: Api
        HttpGet:
          Properties:
            Method: get
            Path: /static/instructors.json
          Type: Api
        HttpOptions:
          Properties:
            Method: options
            Path: /static/instructors.json
          Type: Api
        HttpGet:
          Properties:
            Method: get
            Path: /graphql
          Type: Api
        HttpOptions:
          Properties:
            Method: options
            Path: /graphql
          Type: Api
        HttpPost:
          Properties:
            Method: post
            Path: /graphql
          Type: Api
      Environment:
        Variables:
          IsProduction: !Ref IsProduction
          UserSNSTopic: !Ref UserSNSTopic
      Role: !GetAtt GraphQLRole.Arn
      Runtime: nodejs14.x
      Timeout: 20
      MemorySize: 512
  GraphQLRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - arn:aws:logs:*:*:*
              - Action:
                  - SNS:Publish
                Effect: Allow
                Resource:
                  - !Ref UserSNSTopic
            Version: "2012-10-17"
          PolicyName: LambdaPolicy
  Emailer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./emailer
      Handler: index.handler
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref UserSNSTopic
      Environment:
        Variables:
          GmailAddress: !Ref GmailAddress
          GamilClientID: !Ref GamilClientID
          GmailClientSecret: !Ref GmailClientSecret
          GmailRefreshToken: !Ref GmailRefreshToken
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs14.x
      Timeout: 20
      MemorySize: 512
  ScheduledRemoveTimetable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cron-remove-timetable
      Handler: index.handler
      Environment:
        Variables:
          AtlasUri: !Ref AtlasUri
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs14.x
      Timeout: 20
      MemorySize: 512
  ScheduledRemoveTimetableRule:
    Properties: 
      ScheduleExpression: cron(0 0 * * ? *)
      State: ENABLED
      Targets: 
        - Arn: 
            Fn::GetAtt: 
              - ScheduledRemoveTimetable
              - Arn
          Id: TargetFunctionV1
    Type: AWS::Events::Rule
  InvokeRemoveTimetablePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: ScheduledRemoveTimetable
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        Fn::GetAtt: 
          - ScheduledRemoveTimetableRule
          - Arn
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - arn:aws:logs:*:*:*
            Version: "2012-10-17"
          PolicyName: LambdaPolicy
